name: Deploy to Dokploy

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOKPLOY_URL: http://51.195.43.106:3000
  APP_NAME: pivot

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: bcmath, ctype, fileinfo, json, mbstring, openssl, pdo, pdo_mysql, tokenizer, xml, zip, gd
        coverage: none
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      
    - name: Install PHP Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      
    - name: Install NPM Dependencies
      run: npm ci
      
    - name: Generate key
      run: php artisan key:generate
      
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
      
    - name: Build Assets
      run: npm run build
      
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: |
        touch database/database.sqlite
        php artisan migrate
        php artisan test

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Dokploy
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install Dependencies & Build
      run: |
        npm ci
        npm run build
        
    - name: Trigger Dokploy Deployment
      run: |
        curl -X POST \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.DOKPLOY_TOKEN }}" \
          -d '{"appName": "pivot", "branch": "main"}' \
          "${{ env.DOKPLOY_URL }}/api/applications/deploy"
        
    - name: Wait for Deployment
      run: sleep 60
        
    - name: Health Check
      run: |
        curl -f https://pivot.guillaume-lcte.fr/health || exit 1

  webhook-deploy:
    runs-on: ubuntu-latest
    name: Webhook Deploy (Alternative)
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Trigger Dokploy Webhook
      run: |
        curl -X POST "${{ secrets.DOKPLOY_WEBHOOK_URL }}"

  notify:
    runs-on: ubuntu-latest
    name: Notify Deployment Status
    needs: [test, deploy]
    if: always()
    
    steps:
    - name: Deployment Success
      if: needs.deploy.result == 'success'
      run: |
        echo "‚úÖ Deployment successful!"
        echo "üåê Application available at: https://pivot.guillaume-lcte.fr"
        
    - name: Deployment Failed
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        exit 1 